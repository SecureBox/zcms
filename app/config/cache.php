<?php
defined('ZCMS') or die('Access denied');

/*
 * Используется двухуровневое кэширование, на уровне данных и на уровне шаблонов:
 *
 * 1. Кэширование на уровне данных происходит при получении от модели данных, необходимых для
 *    формирования страницы:
 *    a. Кэширование запросов к БД: если при вызове методов класса Database fetchAll(), fetch(),
 *       fetchOne() параметр $cahe установлен в true. Такое кэширование часто используется в
 *       методах классов моделей, если метод содержит только вызов метода БД.
 *    b. Кэширование данных в методах моделей: если метод класса модели содержит не только вызов
 *       метода БД, но и производит (сложные) вычисления.
 *    c. Кроме того, иногда идет обращение к кэшу напрямую, чтобы записать/получить какие-то
 *       данные. Экземпляр класса Cache доступен практически везде, см. Base::__construct()
 * 2. Кэширование на уровне шаблонов используется, когда контроллер получил от модели данные и
 *    «прогоняет» их через шаблон, см. метод Fronthend_Controller::render().
 *
 * Обычно, чтобы ускорить работу приложения и снизить нагрузку на сервер, достаточно включить
 * кэширование на уровне данных; кэширование на уровне шаблонов еще немного ускоряет работу, но
 * резко увеличивает размер файлового кэша.
 */

// см. файл app/config/config.php
$cache = array(
    'enable' => array(
        'data' => true,           // кэширование данных разрешено?
        'html' => false,          // кэширование шаблонов разрешено?
    ),
    'file'   => array(           // кэширование с использованием файлов
        'time' => 7200,          // время хранения кэша в секундах
        'lock' => 10,            // максимальное время блокировки на чтение в секундах
        'dir'  => 'cache',       // директория для хранения файлов кэша
    ),
    'mem'    => array(           // кэширование с использованием демона Memcached
        /*
         * если кэширование данных или шаблонов разрешено, оно будет работать, используя файлы;
         * дополнительно можно включить кэширование в оперативной памяти; для этого устанавливаем
         * демон Memcached, расширение memcache и в следующей строке выставляем 'enable' => true;
         * при включенном кэшировании в оперативной памяти, кэш будет двухуровневый: сперва данные
         * запрашиваются из оперативной памяти, а потом из файлового кэша
         */
        'enable' => false,       // кэширование с использованием Memcached разрешено?
        'time'   => 3600,        // время хранения кэша в секундах
        'lock'   => 10,          // максимальное время блокировки на чтение в секундах
        'host'   => 'localhost',
        'port'   => 11211,
    ),
);